import org.apache.commons.io.FileUtils;

plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
}

String getGitCommit() {
	ByteArrayOutputStream stdout = new ByteArrayOutputStream();
	exec {
		commandLine("git", "rev-parse", "--short", "HEAD")
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

String getGitBranch() {
	ByteArrayOutputStream stdout = new ByteArrayOutputStream();
	exec {
		commandLine("git", "rev-parse", "--abbrev-ref", "HEAD")
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

version = project.mod_version + "+" + getGitBranch() + "." + getGitCommit()
group = project.maven_group

// Set Build Dir to main to differentiate
buildDir = new File(buildDir, getGitBranch())
if(new File(buildDir, "libs").exists()) FileUtils.cleanDirectory(buildDir.toPath().resolve("libs").toFile())

base {
	archivesName = project.archives_base_name
}

// Repo for CT intermediary mappings
repositories {
	flatDir { dirs("libraries") }

	maven { url 'https://github.com/not-coded/notcoded-maven/raw/fabric/' }
	maven { url 'https://maven.nucleoid.xyz' }
	//maven { url "https://maven.rizecookey.net/" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.gegy.dev/" }
	maven { url "https://jitpack.io" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven { url 'https://github.com/ricksouth/serilum-forge-maven/raw/maven/' }
	maven { url 'https://repo.minebench.de/' }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"


	modImplementation("com.combatreforged.factory:factory-api:${project.factory_version}-full")
	modImplementation("com.combatreforged.factory:factory-builder:${project.factory_version}-${project.minecraft_version}-full")

	include(implementation("com.google.code.gson:gson:${project.gson_version}"))

	include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}")))
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//include(modApi("eu.pb4:hologram-api:0.1.0") { exclude(group: "net.fabricmc.fabric-api") })
	//include(modApi("eu.pb4:sidebar-api:0.0.2") { exclude(group: "net.fabricmc.fabric-api") })

	modImplementation("com.natamus:saveandloadinventories_fabric:${project.saveandloadinventories_version}")
	modApi("com.natamus.collective:collective-fabric:${project.collective_version}")

	modApi("xyz.nucleoid:fantasy:${project.fantasy_version}") {exclude(group: "net.fabricmc.fabric-api") }

	include(modApi("eu.pb4:sgui:${project.sgui_version}")  { exclude(group: "net.fabricmc.fabric-api") })
	include(modApi("me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig1u_version}") { exclude(group: "net.fabricmc.fabric-api") })
	//include(modApi("xyz.nucleoid:plasmid:${project.plasmid_version}"))


	include(implementation("com.googlecode.json-simple:json-simple:${project.json_simple_version}"))
	modApi("me.lucko:fabric-permissions-api:${project.fabric_permissions_api_version}")

	include(modApi("net.blumbo:blfscheduler:${project.blfscheduler_version}"))
	include(modApi("io.github.blumbo:inventory-merger:${project.inventory_merger_version}"))
	include(modApi("net.notcoded:codelib:${project.codelib_version}+${project.minecraft_version}"))

	compileOnly("net.luckperms:api:${project.luckperms_api_version}")


	// discord shit
	include(api("net.dv8tion:JDA:${project.jda_version}"))
	include(api("club.minnced:discord-webhooks:${project.discord_webhooks_version}") { exclude(group: "org.json") })
	include(api("org.json:json:${project.json_version}"))


	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

// Custom Manifest and Intermediary mappings declaration
loom {
	accessWidenerPath = file("src/main/resources/nexia.accesswidener")
	customMinecraftManifest = "https://gist.githubusercontent.com/rizecookey/4c6142baaccc3875f9b227fe22f2ace5/raw/c8ed74b19f7a5315813c9d4b199798b692a8f359/1.16_combat-6.json"

	intermediaryUrl = "https://maven.rizecookey.net/net/fabricmc/intermediary/%1\$s/intermediary-%1\$s-v2.jar"
}

processResources {
	inputs.property "version", project.version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = targetJavaVersion
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}